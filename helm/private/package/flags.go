package main

import (
	"os"

	"github.com/masmovil/mm-monorepo/helm/lib/chart"
	log "github.com/sirupsen/logrus"
	flag "github.com/spf13/pflag"
)

type packageOptions struct {
	Out					string
	ChartPath			string
	Debug 				bool
	ImageTag			string
	ImageRepository		string
	ImageDigestPath		string
	ValuesRepoPath		string
	ValuesTagPath		string

	chart.ChartOptions
}

func parseFlags() packageOptions {
	opts := &packageOptions{}

	log.Debugf("Golang binary Args: %+v", os.Args)

	flag.BoolVar(&opts.Debug, "debug", false, "Debug flag")
	flag.StringVar(&opts.Out, "out_dir", "", "Output directory where to locate the packaged helm chart")
	flag.StringVar(&opts.ChartPath, "chart_root_path", "", "Helm chart sources path")
	flag.StringVar(&opts.Name, "chart_name", "", "Package helm chart name")
	flag.StringVar(&opts.Version, "version", "", "helm chart version")
	flag.StringVar(&opts.AppVersion, "app_version", "", "helm chart app version")
	flag.StringVar(&opts.ApiVersion, "api_version", "", "helm chart API version")
	flag.StringVar(&opts.KubeVersion, "kube_version", "", "SemVer constraint specifying the version of Kubernetes required")
	flag.StringVar(&opts.Description, "description", "", "helm chart description")
	flag.StringVar(&opts.Condition, "condition", "", "Condition to check to enable chart")
	flag.StringVar(&opts.ValuesRepoPath, "values_repo_path", "", "Yaml dot path for docker repository value")
	flag.StringVar(&opts.ValuesTagPath, "values_tag_path", "", "Yaml dot path for docker tag value")
	flag.StringVar(&opts.ImageRepository, "image_repository", "", "Docker image repository")
	flag.StringVar(&opts.ImageTag, "image_tag", "", "Docker image tag")
	flag.StringVar(&opts.ImageDigestPath, "digest_path", "", "Path to digest file generated by container_image docker rule")
	flag.StringVar(&opts.Tags, "tags", "", "The tags to check to enable chart")
	flag.StringVar(&opts.Values, "values", "", "Chart additional explicit values")
	flag.StringArrayVar(&opts.Keywords, "keywords", []string{}, "A list of string keywords of the chart manifest")
	flag.StringArrayVar(&opts.ValueFiles, "value_file", []string{}, "Chart additional value files")
	flag.StringArrayVar(&opts.Templates, "template", []string{}, "Chart additional templates")
	flag.StringArrayVar(&opts.Files, "file", []string{}, "Chart additional files")
	flag.StringArrayVar(&opts.Deps, "chart_dep", []string{}, "Chart dependencies")

	flag.Parse()

	log.Debugf("Options extracted from binary args: %+v", opts)

	return *opts
}
